h1,
h2,
p {
  font-family: Lato;
}

body {
  margin: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  /* if the flex-direction is row the align items will work on the column and if the if the direction is column the align-items will work on row; */
  justify-content: center;
}

.btn-container {
  padding: 20px;
  display: flex;
  width: 100vw;
  align-items: center;
  justify-content: center;
}

.heading {
  text-align: center;
}

/* before and after are pseudo elements that are added inside the selector/class/id before and after the content respectively . By :default these pseudo elements are inline elements . They align themselves in line with the content , however they can be made block level elements simply by adding the display : block */

.heading::before {
  content: '';
  height: 5px;
  width: 300px;
  background-color: red;
  display: block;
  margin-top: 1rem;
}

.heading::after {
  content: '';
  height: 5px;
  width: 300px;
  background-color: red;
  display: block;
  margin-top: 1rem;
}

.container-1 {
  width: 100vw;
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
  margin-top: 2rem;
}

/* The transform property helps to transform elements by scale , skew , size etc*/

.box {
  width: 25px;
  height: 25px;
  border: 1px solid rgb(4, 143, 143);
  border-radius: 2px;
  background-color: teal;
  color: aliceblue;
  display: flex;
  /* the below styles work on the content inside the flexbox */
  align-items: center;
  justify-content: space-around;
}

.heading-postion {
  margin: 4rem;
  width: 12rem;
  height: 3rem;
  color: aliceblue;
  background-color: coral;
  border-radius: 15px;
  text-align: center;
  position: relative;
}

.b1 {
  transform: translate(10px, 30px);
  transform: skewX(20deg);
  transform: scale(1.5);
  transform: rotate(45deg);
  /* rotates the element by 45 degrees; */
}
.b2 {
  transform: scale(2);
  /* increases the size of the element by 2  there are properties like sclaeX and scaleY which will change the scale corresponding to the mentioned axes*/
}
.b3 {
  transform: skewX(45deg);
  /* skews the element by the given degrees in the the given axes*/
}
.b4 {
  transform: translate(10px, 30px);
  /* Moves the element --  1st parameter is horizontal axis and the 2nd parameter is the vertical axis (the values can be positive and negative) it also has the translateX and translateY;*/
}

/* Fact : the TransForm properties get overridden by if multiple transform properties are added to a single element , the last transform property only gets executed 
for example in case of class b1 ... even through there are multiple transform properties in the class only the rotate property gets executed*/

/* To overcome the above problem we need to follow the matrix property
matrix ( [scaleX], [skewY], [skewX], [scaleY], [translateX], [translateY], ); */

.b5 {
  transform: matrix(2, 1, 1, 1, 25, 25);
}

/* Transition need a trigger i.e what needs to happen in order for something to take place */
.b6 {
  transition-property: width;
  transition-delay: 0.5s;
  transition-duration: 0.5s;
  transition-timing-function: ease-in;

  /* This basically means that when we hover over the div with class b6 cursor should change to pointer 
   @ The property transition-property:  tell us which property needs to be trasitioned
   @ transition-delay: tells us after how much time should the transition start;
   @ transition-duration: tell us for how much duration the transition must last;
   @ transition-timing-functio : the transition: starts slowly then gets fast;  */
}

.b6:hover {
  cursor: pointer;
  width: 80px;
}

/*  suppose we want to transition multiple properties then we can use the property transition-property: hover */

.b7 {
  /* transition-property: all;
  transition-duration: 0.3s;
  transition-delay: 0.5s;
  transition-timing-function: ease-in; 
  the below is equivalent to above

  transition short hand; [transition-property:] [transition-duration: ] [transition-timing-function: ] [transition-delay;]
  */
  transition: all 0.3s ease-in;
}

.b7:hover {
  cursor: pointer;
  height: 80px;
  width: 80px;
  border-radius: 50%;
  background-color: rosybrown;
  border: 2px solid rosybrown;
  transform: rotate(360deg);
}

/* ------------------------------------------------------------------- POSITIONING --------------------------------------------------------------------------------*/

/* Postioning : with CSS positioning we are always positioniong our elements in 4 directions top, right ,left , bottom i.e we are always moving our elements corresponding to out top right bottom or left postion
ALWAYS REMEMBER THE POSTIONING IS GOING TO HAPPEN CORRESPONDING TO THESE 4 PROPERTIES

.box-test {
  position:relative;
  top:100px;
}

the above basically means that we are offseting the box class away from the top edge by 100px , i.e the box2 class will move down by 100px and it is -ve100px it will move towards the top edge i.e it move outwards by 100px

Relative postion is basically the original position
Absolute postion is basically positioned corresponding the nearest containing element i.e the element containing the absolute positioned element
*/

.parent {
  width: 300px;
  height: 300px;
  background-color: black;
  color: aliceblue;
  position: relative;
}

.child {
  width: 50px;
  height: 50px;
  background-color: red;
  color: aliceblue;
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  top: 45%;
  left: 45%;

  /* here the top and left position of the child box is corresponding to the parent box. The parent box has the relative postion and the child box has the absolute position which cases the child box to fix its postioning corresponding to the parent box */
}

/* Absolute elements are moved from the documnet flow i.e when any of the divs are positioned with absolute -->  the other divs are agnostic of the presence of the div and they take up the position of the DIV  as we can see in the yellow diagram  the Child2 does  take pace of the child 1  

* In case of positioning when we set the attribute bottom of child 3 as 10px it moves up by 10 px from the parents bottom edge hereby signifying that absolute positioning is corresponding to the nearest containing element
*/

/* Relative  elements are not  moved from the documnet flow i.e when any of the divs are positioned with relative -->  the other divs are AWARE of the presence of the div and they do not take up the position of the DIV as we can see in the blue diagram  the Child2 does not take pace of the child 1  

* In case of positioning when we set the attribute bottom of child 3 as 10px it moves up by 10 px from its original (own) positon 
*/

.abs-rel-container {
  display: flex;
  width: 100vw;
  justify-content: space-around;
}

.parent-1 {
  width: 300px;
  height: 300px;
  background-color: rgb(16, 250, 250);
  color: aliceblue;
  position: relative;
  margin: 5rem;
}

.child-nxt-1 {
  width: 50px;
  height: 50px;
  background-color: red;
  color: aliceblue;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  right: -30%;
}
.child-nxt-2 {
  width: 50px;
  height: 50px;
  background-color: rgb(0, 68, 255);
  color: aliceblue;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
}
.child-nxt-3 {
  width: 50px;
  height: 50px;
  background-color: rgb(225, 0, 255);
  color: aliceblue;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  bottom: 20px;
}

.parent-11 {
  width: 350px;
  height: 350px;
  background-color: rgb(231, 210, 20);
  color: aliceblue;
  position: relative;
  margin: 5rem;
  overflow: auto;
}

.child-nxt-11 {
  width: 50px;
  height: 50px;
  background-color: red;
  color: aliceblue;
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  right: 20%;
}
.child-nxt-22 {
  width: 50px;
  height: 50px;
  background-color: rgb(0, 68, 255);
  color: aliceblue;
  display: flex;
  justify-content: center;
  align-items: center;
}
.child-nxt-33 {
  width: 50px;
  height: 50px;
  background-color: rgb(225, 0, 255);
  color: aliceblue;
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  bottom: 20px;
}

.child-nxt-66 {
  width: 50px;
  height: 50px;
  background-color: rgb(0, 255, 149);
  color: rgb(1, 7, 12);
  display: flex;
  justify-content: center;
  align-items: center;
  position: fixed;
  bottom: 20px;
}

.child-nxt-44 {
  width: 50px;
  height: 50px;
  background-color: rgb(247, 0, 255);
  color: rgb(249, 251, 252);
  display: flex;
  justify-content: center;
  align-items: center;
  position: sticky;
  top: 0px;
  /* This is the threshold value here ; this basically means that the child 4 will go to top:0 i.e the top edge of the parent box and then it will stop (stick there)*/
}

.child-nxt-z1 {
  width: 50px;
  height: 50px;
  background-color: rgb(0, 255, 85);
  color: rgb(0, 5, 7);
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  right: 50px;
  z-index: 5;
  /* With the Z-index here we are stacking z1 over z2*/
}

.child-nxt-z2 {
  width: 50px;
  height: 50px;
  background-color: rgb(0, 255, 255);
  color: rgb(1, 8, 12);
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  left: 260px;
  top: 125px;
  z-index: 0;
}

/* Fixed postioning is always fixed corresponding to the view port; It works exactly like the absolute positioning but the parent element is always the view port ; fixed also removes the element out of the document flow

* In the child 4 with the fixed positioning we can see that the element is always above the visible viewport by 20px

*/

/* With sticky the element gets stuck after it has reached the threshhold-value */

/* Z index decides the overlaw of the html elements i.e which element will be over which element */
